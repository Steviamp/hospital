// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PapageorgiouHospitalQueueSystem.Data;

#nullable disable

namespace PapageorgiouHospitalQueueSystem.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("PapageorgiouHospitalQueueSystem.Models.DoctorsOffice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("DoctorsOffices");
                });

            modelBuilder.Entity("PapageorgiouHospitalQueueSystem.Models.Patient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CalledAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CurrentDoctorsOfficeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PatientNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CurrentDoctorsOfficeId");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("PapageorgiouHospitalQueueSystem.Models.PatientCall", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CalledAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DoctorsOfficeId")
                        .HasColumnType("int");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DoctorsOfficeId");

                    b.HasIndex("PatientId");

                    b.ToTable("PatientCalls");
                });

            modelBuilder.Entity("PapageorgiouHospitalQueueSystem.Models.Patient", b =>
                {
                    b.HasOne("PapageorgiouHospitalQueueSystem.Models.DoctorsOffice", "CurrentDoctorsOffice")
                        .WithMany()
                        .HasForeignKey("CurrentDoctorsOfficeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("CurrentDoctorsOffice");
                });

            modelBuilder.Entity("PapageorgiouHospitalQueueSystem.Models.PatientCall", b =>
                {
                    b.HasOne("PapageorgiouHospitalQueueSystem.Models.DoctorsOffice", "DoctorsOffice")
                        .WithMany("PatientCalls")
                        .HasForeignKey("DoctorsOfficeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PapageorgiouHospitalQueueSystem.Models.Patient", "Patient")
                        .WithMany("PatientCalls")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DoctorsOffice");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("PapageorgiouHospitalQueueSystem.Models.DoctorsOffice", b =>
                {
                    b.Navigation("PatientCalls");
                });

            modelBuilder.Entity("PapageorgiouHospitalQueueSystem.Models.Patient", b =>
                {
                    b.Navigation("PatientCalls");
                });
#pragma warning restore 612, 618
        }
    }
}
